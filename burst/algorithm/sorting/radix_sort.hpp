#ifndef BURST_ALGORITHM_SORTING_RADIX_SORT_HPP
#define BURST_ALGORITHM_SORTING_RADIX_SORT_HPP

#include <burst/algorithm/identity.hpp>
#include <burst/algorithm/low_byte.hpp>
#include <burst/algorithm/sorting/detail/radix_sort.hpp>

namespace burst
{
    //!     Поразрядная сортировка.
    /*!
            Алгоритм поразрядной сортировки, работающий за линейное время и использующий
        O(max(N, M)) дополнительной памяти, где N — размер входного диапазона, M — максимальное
        значение одного разряда сортируемых целых чисел.
            В процессе сортировки используется дополнителный буфер, линейный по памяти относительно
        рвзмера сортируемого диапазона.
            Максимальное значение вычисляется на этапе компиляции, исходя из типа, возвращаемого
        отображением "Radix".

        \tparam Iterator
            Тип принимаемого на вход диапазона, который нужно отсортировать.

            1. Однонаправленный итератор.
               Если итератор однонаправленный и разрядов в сортируемых числах больше одного, то для
               сортировки будет использовано два дополнительных буфера, а по окончании
               сортированные данные будут перемещены обратно во входной диапазон.
               Если в сортируемых числах один разряд, то будет использован только один буфер.

            2. Итератор произвольного доступа.
               Если итератор произвольного доступа, то для сортировки будет заведён только один
               дополнительный буфер, а в роли второго буфера будет выступать входной диапазон.
        \tparam Map
            Отображение входных объектов в целые числа.
            Сортировка происходит по разрядам числа, полученного из этого отображения. Поэтому от
            него требуется, чтобы результатом отображения были целые числа.
        \tparam Radix
            Функция выделения разряда из целого числа. По значениям этого отображения и происходит
            сортировка.
            Должна возвращать целое число, представляющее младший разряд сортируемого числа.
            Для получения более старших разрядов сортируемое число, полученное отображением Map,
            побитово сдвигается на число битов в разряде, и к нему снова применяется функция Radix.

            Алгоритм работы.

            Алгоритм эквивалентен последовательному вызову сортировки подсчётом для каждого разряда
        сортируемых чисел от младшего разряда к старшему. Но детали реализации несколько другие. В
        частности, счётчики для сортировки подсчётом вычисляются за один проход для всех разрядов,
        а не отдельным проходом на каждый разряд.
     */
    template <typename Iterator, typename Map, typename Radix>
    void radix_sort (Iterator first, Iterator last, Map map, Radix radix)
    {
        detail::radix_sort_impl(first, last, map, radix);
    }

    template <typename Iterator, typename Map>
    void radix_sort (Iterator first, Iterator last, Map map)
    {
        radix_sort(first, last, map, low_byte<>());
    }

    template <typename Iterator>
    void radix_sort (Iterator first, Iterator last)
    {
        radix_sort(first, last, identity<>(), low_byte<>());
    }
} // namespace burst

#endif // BURST_ALGORITHM_SORTING_RADIX_SORT_HPP
