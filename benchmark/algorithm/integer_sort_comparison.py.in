#!/usr/bin/python
# -*- coding: utf-8 -*-

from subprocess import Popen, PIPE
import argparse
import numpy as np
import matplotlib.pyplot as plt

def measure (lengths, max_attempts):
    measurements = {}

    for length, attempts in [(l, max_attempts / l) for l in lengths]:
        command = "@CMAKE_BINARY_DIR@/benchmark/rangegen --count=1 --length=" + str(length) + " | @CMAKE_BINARY_DIR@/benchmark/algorithm/radix --attempts=" + str(attempts) + " --bits=32"
        results = Popen(command, shell=True, stdin=PIPE, stdout=PIPE).stdout.read().splitlines()

        for algorithm, time in [(a, float(t) / attempts) for a, t in [item.split() for item in results]]:
            times = measurements.setdefault(algorithm, [])
            times += [time]

    return measurements

def plot (lengths, measurements, file_name):
    plt.figure(num=1)
    plt.title(u'Производительность целочисленных сортировок', size=14)
    plt.xlabel(u'Размер массива', size=14)
    plt.ylabel(u'Время, с', size=14)

    x = np.array(lengths)

    for algorithm, times in measurements.items():
        y = np.array(times)
        plt.plot(x, y, label=algorithm)

    plt.legend(loc='upper left')
    plt.savefig(file_name, format='png')

def parse_command_line ():
    parser = argparse.ArgumentParser()
    parser.add_argument('-b', '--begin', default=10)
    parser.add_argument('-e', '--end', default=100)
    parser.add_argument('-s', '--step', default=10)
    args = parser.parse_args()
    return int(args.begin), int(args.end), int(args.step)

max_attempts = 10000000

begin, end, step = parse_command_line()
lengths = range(begin, end, step)

measurements = measure(lengths, max_attempts)
plot(lengths, measurements, 'intsort.png')
